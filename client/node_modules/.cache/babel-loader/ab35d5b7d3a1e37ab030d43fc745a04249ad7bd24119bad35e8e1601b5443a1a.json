{"ast":null,"code":"import _objectSpread from\"C:/Users/neelp/OneDrive/Documents/Elevate Labs/Privacy-Notes-App/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{encryptData,decryptData}from'./encryption';const DB_NAME='privacy-notes-db';const STORE_NAME='notes';const db={async getAllNotes(){return new Promise(resolve=>{const request=indexedDB.open(DB_NAME,1);request.onupgradeneeded=event=>{const db=event.target.result;if(!db.objectStoreNames.contains(STORE_NAME)){db.createObjectStore(STORE_NAME,{keyPath:'id'});}};request.onsuccess=event=>{const db=event.target.result;const transaction=db.transaction(STORE_NAME,'readonly');const store=transaction.objectStore(STORE_NAME);const getAllRequest=store.getAll();getAllRequest.onsuccess=()=>{const notes=getAllRequest.result.map(note=>_objectSpread(_objectSpread({},note),{},{title:decryptData(note.title),content:decryptData(note.content)}));resolve(notes);};};request.onerror=()=>{resolve([]);};});},async saveNote(note,id){return new Promise(resolve=>{const request=indexedDB.open(DB_NAME,1);request.onsuccess=event=>{const db=event.target.result;const transaction=db.transaction(STORE_NAME,'readwrite');const store=transaction.objectStore(STORE_NAME);const noteToSave={id:id||Date.now().toString(),title:encryptData(note.title),content:encryptData(note.content),updatedAt:new Date().toISOString()};const putRequest=store.put(noteToSave);putRequest.onsuccess=()=>{this.getAllNotes().then(resolve);};};});},async deleteNote(id){return new Promise(resolve=>{const request=indexedDB.open(DB_NAME,1);request.onsuccess=event=>{const db=event.target.result;const transaction=db.transaction(STORE_NAME,'readwrite');const store=transaction.objectStore(STORE_NAME);const deleteRequest=store.delete(id);deleteRequest.onsuccess=()=>{this.getAllNotes().then(resolve);};};});}};export default db;","map":{"version":3,"names":["encryptData","decryptData","DB_NAME","STORE_NAME","db","getAllNotes","Promise","resolve","request","indexedDB","open","onupgradeneeded","event","target","result","objectStoreNames","contains","createObjectStore","keyPath","onsuccess","transaction","store","objectStore","getAllRequest","getAll","notes","map","note","_objectSpread","title","content","onerror","saveNote","id","noteToSave","Date","now","toString","updatedAt","toISOString","putRequest","put","then","deleteNote","deleteRequest","delete"],"sources":["C:/Users/neelp/OneDrive/Documents/Elevate Labs/Privacy-Notes-App/client/src/utils/db.jsx"],"sourcesContent":["import { encryptData, decryptData } from './encryption';\r\n\r\nconst DB_NAME = 'privacy-notes-db';\r\nconst STORE_NAME = 'notes';\r\n\r\nconst db = {\r\n  async getAllNotes() {\r\n    return new Promise((resolve) => {\r\n      const request = indexedDB.open(DB_NAME, 1);\r\n\r\n      request.onupgradeneeded = (event) => {\r\n        const db = event.target.result;\r\n        if (!db.objectStoreNames.contains(STORE_NAME)) {\r\n          db.createObjectStore(STORE_NAME, { keyPath: 'id' });\r\n        }\r\n      };\r\n\r\n      request.onsuccess = (event) => {\r\n        const db = event.target.result;\r\n        const transaction = db.transaction(STORE_NAME, 'readonly');\r\n        const store = transaction.objectStore(STORE_NAME);\r\n        const getAllRequest = store.getAll();\r\n\r\n        getAllRequest.onsuccess = () => {\r\n          const notes = getAllRequest.result.map(note => ({\r\n            ...note,\r\n            title: decryptData(note.title),\r\n            content: decryptData(note.content)\r\n          }));\r\n          resolve(notes);\r\n        };\r\n      };\r\n\r\n      request.onerror = () => {\r\n        resolve([]);\r\n      };\r\n    });\r\n  },\r\n\r\n  async saveNote(note, id) {\r\n    return new Promise((resolve) => {\r\n      const request = indexedDB.open(DB_NAME, 1);\r\n\r\n      request.onsuccess = (event) => {\r\n        const db = event.target.result;\r\n        const transaction = db.transaction(STORE_NAME, 'readwrite');\r\n        const store = transaction.objectStore(STORE_NAME);\r\n\r\n        const noteToSave = {\r\n          id: id || Date.now().toString(),\r\n          title: encryptData(note.title),\r\n          content: encryptData(note.content),\r\n          updatedAt: new Date().toISOString()\r\n        };\r\n\r\n        const putRequest = store.put(noteToSave);\r\n\r\n        putRequest.onsuccess = () => {\r\n          this.getAllNotes().then(resolve);\r\n        };\r\n      };\r\n    });\r\n  },\r\n\r\n  async deleteNote(id) {\r\n    return new Promise((resolve) => {\r\n      const request = indexedDB.open(DB_NAME, 1);\r\n\r\n      request.onsuccess = (event) => {\r\n        const db = event.target.result;\r\n        const transaction = db.transaction(STORE_NAME, 'readwrite');\r\n        const store = transaction.objectStore(STORE_NAME);\r\n\r\n        const deleteRequest = store.delete(id);\r\n\r\n        deleteRequest.onsuccess = () => {\r\n          this.getAllNotes().then(resolve);\r\n        };\r\n      };\r\n    });\r\n  }\r\n};\r\n\r\nexport default db;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}