{"ast":null,"code":"import { encryptData, decryptData } from './encryption';\nconst DB_NAME = 'privacy-notes-db';\nconst STORE_NAME = 'notes';\nconst db = {\n  async getAllNotes() {\n    return new Promise(resolve => {\n      const request = indexedDB.open(DB_NAME, 1);\n      request.onupgradeneeded = event => {\n        const db = event.target.result;\n        if (!db.objectStoreNames.contains(STORE_NAME)) {\n          db.createObjectStore(STORE_NAME, {\n            keyPath: 'id'\n          });\n        }\n      };\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(STORE_NAME, 'readonly');\n        const store = transaction.objectStore(STORE_NAME);\n        const getAllRequest = store.getAll();\n        getAllRequest.onsuccess = () => {\n          const notes = getAllRequest.result.map(note => ({\n            ...note,\n            title: decryptData(note.title),\n            content: decryptData(note.content)\n          }));\n          resolve(notes);\n        };\n      };\n      request.onerror = () => {\n        resolve([]);\n      };\n    });\n  },\n  async saveNote(note, id) {\n    return new Promise(resolve => {\n      const request = indexedDB.open(DB_NAME, 1);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(STORE_NAME, 'readwrite');\n        const store = transaction.objectStore(STORE_NAME);\n        const noteToSave = {\n          id: id || Date.now().toString(),\n          title: encryptData(note.title),\n          content: encryptData(note.content),\n          updatedAt: new Date().toISOString()\n        };\n        const putRequest = store.put(noteToSave);\n        putRequest.onsuccess = () => {\n          this.getAllNotes().then(resolve);\n        };\n      };\n    });\n  },\n  async deleteNote(id) {\n    return new Promise(resolve => {\n      const request = indexedDB.open(DB_NAME, 1);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(STORE_NAME, 'readwrite');\n        const store = transaction.objectStore(STORE_NAME);\n        const deleteRequest = store.delete(id);\n        deleteRequest.onsuccess = () => {\n          this.getAllNotes().then(resolve);\n        };\n      };\n    });\n  }\n};\nexport default db;","map":{"version":3,"names":["encryptData","decryptData","DB_NAME","STORE_NAME","db","getAllNotes","Promise","resolve","request","indexedDB","open","onupgradeneeded","event","target","result","objectStoreNames","contains","createObjectStore","keyPath","onsuccess","transaction","store","objectStore","getAllRequest","getAll","notes","map","note","title","content","onerror","saveNote","id","noteToSave","Date","now","toString","updatedAt","toISOString","putRequest","put","then","deleteNote","deleteRequest","delete"],"sources":["C:/Users/neelp/OneDrive/Documents/Elevate Labs/Privacy-Notes-App/client/src/utils/db.jsx"],"sourcesContent":["import { encryptData, decryptData } from './encryption';\r\n\r\nconst DB_NAME = 'privacy-notes-db';\r\nconst STORE_NAME = 'notes';\r\n\r\nconst db = {\r\n  async getAllNotes() {\r\n    return new Promise((resolve) => {\r\n      const request = indexedDB.open(DB_NAME, 1);\r\n\r\n      request.onupgradeneeded = (event) => {\r\n        const db = event.target.result;\r\n        if (!db.objectStoreNames.contains(STORE_NAME)) {\r\n          db.createObjectStore(STORE_NAME, { keyPath: 'id' });\r\n        }\r\n      };\r\n\r\n      request.onsuccess = (event) => {\r\n        const db = event.target.result;\r\n        const transaction = db.transaction(STORE_NAME, 'readonly');\r\n        const store = transaction.objectStore(STORE_NAME);\r\n        const getAllRequest = store.getAll();\r\n\r\n        getAllRequest.onsuccess = () => {\r\n          const notes = getAllRequest.result.map(note => ({\r\n            ...note,\r\n            title: decryptData(note.title),\r\n            content: decryptData(note.content)\r\n          }));\r\n          resolve(notes);\r\n        };\r\n      };\r\n\r\n      request.onerror = () => {\r\n        resolve([]);\r\n      };\r\n    });\r\n  },\r\n\r\n  async saveNote(note, id) {\r\n    return new Promise((resolve) => {\r\n      const request = indexedDB.open(DB_NAME, 1);\r\n\r\n      request.onsuccess = (event) => {\r\n        const db = event.target.result;\r\n        const transaction = db.transaction(STORE_NAME, 'readwrite');\r\n        const store = transaction.objectStore(STORE_NAME);\r\n\r\n        const noteToSave = {\r\n          id: id || Date.now().toString(),\r\n          title: encryptData(note.title),\r\n          content: encryptData(note.content),\r\n          updatedAt: new Date().toISOString()\r\n        };\r\n\r\n        const putRequest = store.put(noteToSave);\r\n\r\n        putRequest.onsuccess = () => {\r\n          this.getAllNotes().then(resolve);\r\n        };\r\n      };\r\n    });\r\n  },\r\n\r\n  async deleteNote(id) {\r\n    return new Promise((resolve) => {\r\n      const request = indexedDB.open(DB_NAME, 1);\r\n\r\n      request.onsuccess = (event) => {\r\n        const db = event.target.result;\r\n        const transaction = db.transaction(STORE_NAME, 'readwrite');\r\n        const store = transaction.objectStore(STORE_NAME);\r\n\r\n        const deleteRequest = store.delete(id);\r\n\r\n        deleteRequest.onsuccess = () => {\r\n          this.getAllNotes().then(resolve);\r\n        };\r\n      };\r\n    });\r\n  }\r\n};\r\n\r\nexport default db;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}